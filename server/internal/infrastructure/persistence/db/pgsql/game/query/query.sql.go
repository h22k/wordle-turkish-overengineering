// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const addWordToPool = `-- name: AddWordToPool :one
INSERT INTO word_pool (word, is_answer, is_valid)
VALUES ($1, $2, $3) RETURNING id, word, is_answer, is_valid
`

type AddWordToPoolParams struct {
	Word     string
	IsAnswer bool
	IsValid  bool
}

func (q *Queries) AddWordToPool(ctx context.Context, arg AddWordToPoolParams) (WordPool, error) {
	row := q.db.QueryRow(ctx, addWordToPool, arg.Word, arg.IsAnswer, arg.IsValid)
	var i WordPool
	err := row.Scan(
		&i.ID,
		&i.Word,
		&i.IsAnswer,
		&i.IsValid,
	)
	return i, err
}

const createGame = `-- name: CreateGame :one
INSERT INTO games (secret_word, max_attempts, word_length)
VALUES ($1, $2, $3) RETURNING id, secret_word, word_length, max_attempts, is_active, created_at, updated_at
`

type CreateGameParams struct {
	SecretWord  string
	MaxAttempts int32
	WordLength  int32
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, createGame, arg.SecretWord, arg.MaxAttempts, arg.WordLength)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.SecretWord,
		&i.WordLength,
		&i.MaxAttempts,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createGuess = `-- name: CreateGuess :one
INSERT INTO guesses (game_id, word, attempt_number, session_id)
VALUES ($1, $2, $3, $4) RETURNING id, game_id, word, attempt_number, session_id, created_at
`

type CreateGuessParams struct {
	GameID        uuid.UUID
	Word          string
	AttemptNumber int32
	SessionID     string
}

func (q *Queries) CreateGuess(ctx context.Context, arg CreateGuessParams) (Guess, error) {
	row := q.db.QueryRow(ctx, createGuess,
		arg.GameID,
		arg.Word,
		arg.AttemptNumber,
		arg.SessionID,
	)
	var i Guess
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Word,
		&i.AttemptNumber,
		&i.SessionID,
		&i.CreatedAt,
	)
	return i, err
}

const findGameById = `-- name: FindGameById :one
SELECT id, secret_word, word_length, max_attempts, is_active, created_at, updated_at
FROM games
WHERE id = $1
`

func (q *Queries) FindGameById(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, findGameById, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.SecretWord,
		&i.WordLength,
		&i.MaxAttempts,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActiveGame = `-- name: GetActiveGame :one
SELECT id, secret_word, word_length, max_attempts, is_active, created_at, updated_at
FROM games
WHERE is_active = true
ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetActiveGame(ctx context.Context) (Game, error) {
	row := q.db.QueryRow(ctx, getActiveGame)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.SecretWord,
		&i.WordLength,
		&i.MaxAttempts,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAnswerWords = `-- name: GetAllAnswerWords :many
SELECT word
FROM word_pool
WHERE is_answer = true
`

func (q *Queries) GetAllAnswerWords(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllAnswerWords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var word string
		if err := rows.Scan(&word); err != nil {
			return nil, err
		}
		items = append(items, word)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllValidWords = `-- name: GetAllValidWords :many
SELECT word
FROM word_pool
WHERE is_valid = true
`

func (q *Queries) GetAllValidWords(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllValidWords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var word string
		if err := rows.Scan(&word); err != nil {
			return nil, err
		}
		items = append(items, word)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameGuesses = `-- name: GetGameGuesses :many
SELECT id, game_id, word, attempt_number, session_id, created_at
FROM guesses
WHERE game_id = $1
  AND session_id = $2
ORDER BY attempt_number ASC
`

type GetGameGuessesParams struct {
	GameID    uuid.UUID
	SessionID string
}

func (q *Queries) GetGameGuesses(ctx context.Context, arg GetGameGuessesParams) ([]Guess, error) {
	rows, err := q.db.Query(ctx, getGameGuesses, arg.GameID, arg.SessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Guess
	for rows.Next() {
		var i Guess
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Word,
			&i.AttemptNumber,
			&i.SessionID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameGuessesCount = `-- name: GetGameGuessesCount :one
SELECT COUNT(id)
FROM guesses
WHERE game_id = $1
  AND session_id = $2
ORDER BY attempt_number ASC
`

type GetGameGuessesCountParams struct {
	GameID    uuid.UUID
	SessionID string
}

func (q *Queries) GetGameGuessesCount(ctx context.Context, arg GetGameGuessesCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getGameGuessesCount, arg.GameID, arg.SessionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getRandomSecretWord = `-- name: GetRandomSecretWord :one
SELECT word
FROM word_pool
WHERE is_answer = true
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandomSecretWord(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, getRandomSecretWord)
	var word string
	err := row.Scan(&word)
	return word, err
}

const isValidGuess = `-- name: IsValidGuess :one
SELECT EXISTS(SELECT 1
              FROM word_pool
              WHERE word = $1
                AND is_valid = true)
`

func (q *Queries) IsValidGuess(ctx context.Context, word string) (bool, error) {
	row := q.db.QueryRow(ctx, isValidGuess, word)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const makeGameInactive = `-- name: MakeGameInactive :one
UPDATE games
SET is_active  = false,
    updated_at = NOW()
WHERE id = $1 RETURNING id, secret_word, word_length, max_attempts, is_active, created_at, updated_at
`

func (q *Queries) MakeGameInactive(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, makeGameInactive, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.SecretWord,
		&i.WordLength,
		&i.MaxAttempts,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
